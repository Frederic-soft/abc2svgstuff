#!/bin/sh
##################################################################################
#
# Convert an ABC file into an HTML file with dynamic rendering and playback 
# of the score, using abc2svg
#
# abc2svgweb <abc_file> [<html_file>] [<abc2svg_script_url>]
#
# Frédéric Boulanger                     frederic.softdev@gmail.com
#
##################################################################################
#
## URL of the abc2svg files
# abc2svgurl="http://moinejf.free.fr/js"
# abc2svgurl="file:///usr/local/lib/node_modules/abc2svg"
# abc2svgurl="file:///usr/local/ABC/abc2svg"
abc2svgurl="../abc2svg"

## Scripts to include in the header
# abc2svgscripts="abc2svg-1.js abcemb-1.js play-1.js follow-1.js"
# abc2svgscripts="abc2svg-1.js abcweb2-1.js snd-1.js follow-1.js"
# abc2svgscripts="abc2svg-1.js abcweb2-1.js snd-1.js follow-1.js"
# abc2svgscripts="abcweb-1.js snd-1.js follow-1.js"
abc2svgscripts="abcweb-1.js snd-1.js"

if [ $# -lt 1 ]
then
  echo "# Usage: abc2svgweb <abc_file> [-o <html_file>] [-u <abc2svg_script_url>]"
  echo "#        Converts an ABC music file into a web page, with MIDI rendering"
  echo "#        and refering to individual abc2svg script from the given URL."
  exit 1
fi
directory=`dirname "$1"`
filename=`basename "$1" ".abc"`
outfile="${filename}.html"
shift 1
while [ $# -ge 2 ]
do
  case $1 in
  "-o" )
    outfile="$2"
  ;;
  "-u" )
    abc2svgurl="$2"
  ;;
  *)
    echo "# Unrecognized option: $1 $2"
    exit 1
  ;;
  esac
  shift 2
done
if [ $# -ge 1 ]
then
  echo "# Uncomplete or unrecognized option: $1"
  exit 1
fi

cd "$directory"
# Find included ABC files
includes=`grep -E '^(I:|%%)abc-include' "${filename}.abc" | sed -e 's/..abc-include  *\([^ ]*\).*$/\1/'`
# echo ${includes}
# Get the modification date of all files
dates=`stat -t '%Y%m%d%H%M.%S' -f '%Sm' "${filename}.abc" ${includes}`
# Get the most recent modification date
maxdate=`echo $dates | tr ' ' '\n' | sort -r | head -n 1`
# Format this date as YYYY-MM-DD hh:mm
fmaxdate=`date -j -f '%Y%m%d%H%M.%S' ${maxdate} '+%Y-%m-%d %H:%M'`
# Get the version of abc2svg
abc2svgversion=`abc2svg 2>&1 | head -n 1 | sed -e 's/.*\(abc2svg-[0-9\.]*\).*/\1/'`
# Prépare the HTML file
cat > "${outfile}" << ENDOFPRELUDE
<!DOCTYPE html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
ENDOFPRELUDE
# echo "<meta name=\"generator\" content=\"${abc2svgversion}\"/>" >> "${outfile}"
echo "<!-- CreationDate: `date`-->" >> "${outfile}"

for script in ${abc2svgscripts}
do
  echo "<script type=\"text/javascript\" src=\"${abc2svgurl}/${script}\"></script>" >> "${outfile}"
done

# <script type="text/javascript">
#   window.no_scroll = true ;  // de-activate auto-scrolling when playing the music
# </script>

cat >> "${outfile}" << ENDOFSTYLE
<style type="text/css">
	@media print {
		body { margin:0; padding:0; border:0}
		.nop {display:none}
	}
	@page {size:8.27in 11.69in; margin:0}
	svg {display:block}
	* {cursor: pointer;}  // for iPad onclick
</style>
ENDOFSTYLE

echo "<title>${filename}</title>" >> "${outfile}"
echo "</head>\n<body>\n<script type=\"text/vnd.abc\" class=\"abc\">" >> "${outfile}"

# Process includes and put the correct modification date in headers and footers
abcflatten "${filename}.abc" \
    | sed -e "/^%%header /s/\\\$d/${fmaxdate}/g" \
          -e "/^%%footer /s/\\\$d/${fmaxdate}/g" \
>> "${outfile}"

echo "</script>\n</body>\n</html>" >> "${outfile}"

# This part works only on MacOS
# It tries to refresh the HTML file in Google Chrome if it is already open.
if [ "`which osascript`" != "" ]
then
# Look for a tab displaying our file in one of Chrome's windows
# If found, just reload this tab
# Else, create a new window and load our file in its main tab.
url="file://`pwd`/${outfile}"
osascript \
-e "tell application \"Google Chrome\"" \
-e "  set res to {}" \
-e "  repeat with w in windows" \
-e "    repeat with t in the tabs of w" \
-e "      set u to the URL of t" \
-e "      set hashidx to the offset of \"#\" in u" \
-e "      set u to characters 1 thru (hashidx-1) of u as string" \
-e "      if u is \"${url}\" then" \
-e "        reload t" \
-e "        set res to t" \
-e "        exit repeat" \
-e "      end if" \
-e "    end repeat" \
-e "  end repeat" \
-e "  if res is {} then" \
-e "    tell application \"Google Chrome\"" \
-e "      set w to make new window" \
-e "      set t to get tab 1 of w" \
-e "      set the URL of t to \"${url}\"" \
-e "    end tell" \
-e "  end if" \
-e "end tell"
fi