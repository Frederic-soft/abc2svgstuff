#!/bin/sh
##################################################################################
#
# Convert an ABC file into an HTML file with dynamic rendering and playback 
# of the score, using abc2svg
#
# abc2svgweb <abc_file> [-o <html_file>] [-u <abc2svg_script_url>] [-s <ss-pref_chars>]
#
# Frédéric Boulanger                     frederic.softdev@gmail.com
#
##################################################################################
#
## URL of the abc2svg files
# abc2svgurl="http://moinejf.free.fr/js"
# abc2svgurl="file:///usr/local/lib/node_modules/abc2svg"
# abc2svgurl="file:///usr/local/ABC/abc2svg"
abc2svgurl="../abc2svg"

## Scripts to include in the header
# abc2svgscripts="abc2svg-1.js abcemb-1.js play-1.js follow-1.js"
# abc2svgscripts="abc2svg-1.js abcweb2-1.js snd-1.js follow-1.js"
# abc2svgscripts="abc2svg-1.js abcweb2-1.js snd-1.js follow-1.js"
# abc2svgscripts="abcweb-1.js snd-1.js follow-1.js"
abc2svgscripts="abcweb-1.js snd-1.js"

## Default characters for format lines
sspref="%"

if [ $# -lt 1 ]
then
  echo "# Usage: abc2svgweb <abc_file> [-o <html_file>] [-u <abc2svg_script_url>] [-s <ss-pref_chars>]"
  echo "#        Converts an ABC music file into a web page, with MIDI rendering"
  echo "#        and refering to individual abc2svg script from the given URL."
  exit 1
fi
directory=`dirname "$1"`
filename=`basename "$1" ".abc"`
outfile="${filename}.html"
shift 1
while [ $# -ge 2 ]
do
  case $1 in
  "-o" )
    outfile="$2"
  ;;
  "-u" )
    abc2svgurl="$2"
  ;;
  "-s" )
  	sspref="$2"
  ;;
  *)
    echo "# Unrecognized option: $1 $2"
    exit 1
  ;;
  esac
  shift 2
done
if [ $# -ge 1 ]
then
  echo "# Uncomplete or unrecognized option: $1"
  exit 1
fi

cd "$directory"
# Find included ABC files
includes=`grep -E '^(I:|%%)abc-include' "${filename}.abc" | sed -e 's/..abc-include  *\([^ ]*\).*$/\1/'`
# Get the modification date of all files
#dates=`stat -t '%Y%m%d%H%M.%S' -f '%Sm' "${filename}.abc" ${includes}`
dates=`echo "${filename}.abc" ${includes} | xargs stat -t '%Y%m%d%H%M.%S' -f '%Sm'`
# Get the most recent modification date
maxdate=`echo $dates | tr ' ' '\n' | sort -r | head -n 1`
# Format this date as YYYY-MM-DD hh:mm
fmaxdate=`date -j -f '%Y%m%d%H%M.%S' ${maxdate} '+%Y-%m-%d %H:%M'`
# Get the version of abc2svg
# abc2svgversion=`abc2svg 2>&1 | head -n 1 | sed -e 's/.*\(abc2svg-[0-9\.]*\).*/\1/'`
abc2svgversion=`abc2svg 2>&1 | head -n 1 | sed -e 's/.*\(abc2svg-.*\)/\1/'`
# Prépare the HTML file
cat > "${outfile}" << ENDOFPRELUDE
<!DOCTYPE html>
<head>
<meta http-equiv="Content-Type" content="text/html; charset=UTF-8"/>
ENDOFPRELUDE
echo "<meta name=\"generator\" content=\"${abc2svgversion}\"/>" >> "${outfile}"
echo "<!-- CreationDate: `date`-->" >> "${outfile}"

for script in ${abc2svgscripts}
do
  echo "<script type=\"text/javascript\" src=\"${abc2svgurl}/${script}\"></script>" >> "${outfile}"
done

# <script type="text/javascript">
#   window.no_scroll = true ;  // de-activate auto-scrolling when playing the music
# </script>

cat >> "${outfile}" << ENDOFSTYLE
<style type="text/css">
	@media print {
		body { margin:0; padding:0; border:0}
		.nop {display:none}
	}
	@page {size:8.27in 11.69in; margin:0}
	svg {display:block}
	.nop {line-height: 2.5ex}
	* {cursor: pointer;}  // for iPad onclick
</style>
ENDOFSTYLE

echo "<title>${filename}</title>" >> "${outfile}"
echo "</head>\n<body>\n<script type=\"text/vnd.abc\" class=\"abc\">" >> "${outfile}"

if [ ! "${sspref}" = "%" ]
then
  echo "%%ss-pref ${sspref}" >> "${outfile}"
fi

# Process includes and put the correct modification date in headers and footers
abcflatten "${filename}.abc" \
    | sed -e "/^%%header /s/\\\$d/${fmaxdate}/g" \
          -e "/^%%footer /s/\\\$d/${fmaxdate}/g" \
>> "${outfile}"

echo "</script>\n</body>\n</html>" >> "${outfile}"

## Can be used in BBEdit with the following OSA script in the Scripting folder
# tell application "BBEdit"
# 	set numdocs to the number of text documents
# 	if numdocs > 0 then
# 		set frontdoc to the active document of window 1
# 		if (modified of frontdoc) then
# 			save frontdoc
# 		end if
# 		set abcfileq to the quoted form of POSIX path of (get file of frontdoc)
# 		set abcfile to POSIX path of (get file of frontdoc)
# 		set cmd to "abc2svgweb " & abcfileq
# 		tell application "Terminal"
# 			set numterms to count windows
# 			if numterms > 0 then
# 				do script cmd in window 1
# 			else
# 				do script cmd
# 			end if
# 		end tell
# 		set delimorig to AppleScript's text item delimiters
# 		set AppleScript's text item delimiters to {"."}
# 		set pathItems to text items of abcfile
# 		set AppleScript's text item delimiters to delimorig
# 		set fileurl to "file://"
# 		set n to 1
# 		repeat ((number of items in pathItems) - 1) times
# 			set fileurl to fileurl & item n in pathItems
# 		end repeat
# 		set fileurl to fileurl & ".html"
# 		set delimorig to AppleScript's text item delimiters
# 		set AppleScript's text item delimiters to {" "}
# 		set pathItems to text items of fileurl
# 		set AppleScript's text item delimiters to delimorig
# 		set fileurl to ""
# 		set n to 1
# 		repeat (number of items in pathItems) times
# 			if n = 1 then
# 				set fileurl to item n in pathItems
# 			else
# 				set fileurl to fileurl & "%20" & item n in pathItems
# 			end if
# 			set n to n + 1
# 		end repeat
# 		tell application "Google Chrome"
# 			set res to {}
# 			repeat with w in windows
# 				repeat with t in tabs of w
# 					set u to the URL of t
# 					set delimorig to AppleScript's text item delimiters
# 					set AppleScript's text item delimiters to {"#"}
# 					set urlItems to text items of u
# 					set AppleScript's text item delimiters to delimorig
# 					set u to item 1 in urlItems
# 					if u = fileurl then
# 						reload t
# 						set res to t
# 						exit repeat
# 					end if
# 				end repeat
# 			end repeat
# 			if res is {} then
# 				tell application "Google Chrome"
# 					set w to make new window
# 					set t to get tab 1 of w
# 					set the URL of t to fileurl
# 				end tell
# 			end if
# 		end tell
# 	end if
# end tell
