%% -*-TeX-*-
 % ###################################################################
 % 
 %  FILE: "abcsvgintex.sty"
 %                                    created: 2005-01-24 17:47:39 
 %                                last update: 2024-01-23 17:14:43 
 %  Author: Frédéric Boulanger
 %  E-mail: frederic.boulanger@centralesupelec.fr
 %    mail: CentraleSupélec - Département Informatique
 %          3 rue Joliot-Curie, 91192 Gif-sur-Yvette, France
 %     www: http://wdi.centralesupelec.fr/boulanger/
 %  
 %  Description: 
 %  
 % NEWSTUFF
 % abc -> PDF : abc2svgpdf %.abc ---> %.pdf
 % crop pdf : mv %.pdf %_full.pdf
 %            pdfcrop %_full.pdf %.pdf
 % FFUTSWEN
 %
 %  Support inline ABC notation in LaTeX.
 %  
 %  Options:
 %  --------
 %    keepfiles
 %      Don't delete ABC scores (useful for debugging)
 %      
 %    reusefiles
 %      Implies "keepfiles". Reuse scores that were generated during
 %      a previous run.
 %      
 %  Commands:
 %  ---------
 %    \abcsvgkeepnext
 %      Keep next score, even if keepfiles is false
 %      
 %    \abcsvgreusenext
 %      Reuse files for next score, even if reusefiles is false
 %    
 %    \abcsvgrebuildnext
 %      Don't reuse files for next score, even if reusefiles is true.
 %
 %    \abcsvgauxdir{<directory_path>}
 %      Set the directory for temporary abc and pdf files.
 %      This directory should exist, it won't be created by the package.
 %      
 %    \abcsvgsettings{<key=value list>}
 %      Set ABC score processing options:
 %        raise=<dimen>
 %          raise ABC score boxes by <dimen>. Defaults to 0pt.
 %          
 %        height=<dimen>
 %          force height of ABC score boxes to <dimen>. Default is to 
 %          use the natural height of the score
 %          
 %        depth=<dimen>
 %          force depth of ABC score boxes to <dimen>. Defaults to 
 %          0pt.
 %        
 %        width=<dimen>
 %          force width of ABC score boxes to <dimen>. Default is to 
 %          use the natural width of the score.
 %          
 %        hpos=<l,c,r>
 %          set horizontal position of ABC scores in their box. 
 %          Defaults to 'c'.
 %          
 %        clear
 %          reset ABC score processing options to their default value.
 %          
 %        prefix=<prefix name>
 %          Use <prefix name> as the prefix for ABC code. Defaults to 
 %          the empty prefix.
 %          The prefix is inserted at the very beginning of the 
 %          generated ABC file, before the X:1 tag that starts a song.
 %          
 %        prelude=<prefix name>
 %          Use <prefix name> as the prelude for ABC code. Defaults 
 %          to the empty prelude.
 %          The prelude is inserted at the beginning of the song, 
 %          just after the X:1 tag.
 %          
 %        midi=<midi file name>
 %          Generate <midi file name> from ABC code. No midi file is 
 %          generated by default.
 %          
 %        abc=<ABC file name>
 %          Copy ABC code to file <ABC file name>.
 %          
 %        name=<file name>
 %          Same as midi=<file name>.mid and abc=<file name>.abc
 %        
 %        num=<integer>
 %          Set ABC song number to <integer>
 %          
 %        Other keys are interpreted as ABC tags. Therefore, if you 
 %        put "K=C" in the options of \abcsettings, the tag "K:C" 
 %        will be put in your ABC song. There is no check for valid 
 %        ABC tags.
 %        
 %    \abcsvgpdfsettings{<key=value list>}
 %      Set ABC to SVG options:
 %        pagewidth=<dimen>
 %          Set page width to <dimen>
 %          
 %        pageheight=<dimen>
 %          Set page height to <dimen>
 %          
 %        topmargin=<dimen>
 %          Set top margin to <dimen>
 %          
 %        leftmargin=<dimen>
 %          Set left margin to <dimen>
 %      
 %        botmargin=<dimen>
 %          Set bottom margin to <dimen>
 %      
 %        rightmargin=<dimen>
 %          Set right margin to <dimen>
 %      
 %        staffwidth=<dimen>
 %          Set the width of a staff to <dimen>
 %      
 %        staffsep=<dimen>
 %          Set vertical interstaff space to <dimen>
 %      
 %        scale=<[0,1]>
 %          Set score scale. Lower values put more music on the score.
 %          Defaults to 0.75
 %          
 %        maxshrink=<[0,1]>
 %          Set max horizontal compression. Higher values put more 
 %          music on one line. Defaults to 0.65
 %          
 %        maxstaffsep=<dimen>
 %          Set max vertical interstaff space.
 %          
 %        maxsysstaffsep=<dimen>
 %          Set max vertical interstaff space between systems.
 %          
 %        musicspace=<dimen>
 %          Set vertical space before first staff.
 %          
 %        partspace=<dimen>
 %          Set vertical space before new part.
 %          
 %        printparts=<0,1>
 %          Print part indications (1) or not (0). Defaults to 1
 %          
 %        partsbox=<0,1>
 %          Put part names in boxes or not. Defaults to 1
 %          
 %        measurebox=<0,1>
 %          Put bar numbers in boxes or not. Defaults to 1
 %          
 %        measurenb=<integer>
 %          Number bars.
 %          If < 0, bars are not numbered.
 %          If 0, bars are numbered at each start of a 
 %          new line, else, bars are numbered every <integer> bars.
 %          Defaults to -1.
 %          
 %        contbarnb=<0,1>
 %          Number bars sequentially in repeats. Defaults to 1
 %          
 %        setbarnb=<integer>
 %          Set next bar number.
 %          
 %        writefields=<field list> <0,1>
 %          Display (1) or do not display (0) the fields in the list.
 %          For instance "writefields=Q 0" won't display the tempo (Q) field.
 %          
 %        stretchstaff=<0,1>
 %          Stretch underfull staves across the page or not
 %          
 %        stretchlast=<0,1>
 %          Stretch last staff when underfull.
 %          
 %        linebreak=[<none>|<EOL>|$|!|*|;|?|@]
 %          Define what provoques a line break in the music.
 %        
 %        continueall=<0,1>
 %          Ignore line breaks in the ABC source.
 %        
 %        clear
 %          Reset ABC to SVG options to the empty set.
 %          
 %        
 %      
 %  Environments:
 %  -------------
 %    abcsvgprefix{<prefix name>}
 %      Set the <prefix name> prefix to the contents of the 
 %      environment.
 %      
 %    abcsvgmoreprefix{<prefix name>}
 %      Append the contents of the environment to prefix <prefix 
 %      name>.
 %        
 %    abcsvg
 %      Build a score from the 
 %      contents of the environment, and insert it in the document.
 % 
 %    abcsvgbox{<LaTeX box name>}
 %      Build a score from the contents of the
 %      environment, and put it in box <LaTeX box name>.
 % 
 %    abcsvgannotate[<options>]{<LaTeX box name>}
 %      Insert <LaTeX box name> and annotate it with the contents of 
 %      the environment, which consists in LaTeX picture commands. 
 %      The \unitlength is set to 1pt. The command 
 %      \rput(<x>,<y>){<picture stuff>} allows relative positionning 
 %      of elements over the box contents, with x varying from 0 to 1 
 %      from the left to the right of the box, and <y> varying from 0 
 %      to 1 from the bottom to the top of the box.
 %      
 %      options:
 %        top=<dimen>
 %          top margin over the box
 %        left=<dimen>
 %          left margin before the box
 %        bottom=<dimen>
 %          bottom margin under the box
 %        right=<dimen>
 %          right margin after the box
 %        
 %        under=<text>
 %          insert <text> at the begining of the picture, so that it 
 %          can be used as a background to the score.
 %        
 %        grid=<params>
 %          draw a grid ovor the box to help positionning annotations.
 %          <params> may be:
 %            xdiv=<integer>
 %              set the horizontal grid step to width/<integer>
 %            ydiv=<integer>
 %              set the horizontal grid step to height/<integer>
 %              
 %            xtick=<integer>
 %              set the horizontal step (like xdiv) for ticks (bolder 
 %              lines)
 %            ytick=<integer>
 %              set the vertical step (like ydiv) for ticks (bolder 
 %              lines)
 %   
 %  Private commands that may be redefined according to the platform:
 %  -----------------------------------------------------------------
 %  \abcsvg@copy@file{<src>}{<dst>}
 %    copy file <src> to file <dst>. Defaults to {cp #1 #2}
 %    
 %  \abcsvg@del@file{<file name>}
 %    delete file <file name>}. Defaults to {rm #1}
 %    
 %  \abcsvg@abc@pdf{<abc file>}
 %    convert <abc file> to PDF. Defaults to {abc2svgpdfcrop #1}, 
 %    the name of the PDF file being the same as the source file, but 
 %    with extension '.pdf'
 %    
 %  History
 % 
 %  modified   by  rev reason
 %  ---------- --- --- -----------
 %  2005-01-24 FBO 1.0 original
 %  2005-04-12 FBO 1.1 added 'under' key to abcannotate
 %  2005-04-22 FBO 1.2 X field no longer in prefix, num key 
 %                     to set song number
 %  2006-05-17 FBO 1.3 Added checks for failure to generate files
 %  2024-01-29 FBO 1.4 Switch to abc2svg to process ABC files
 %  2025-08-01 FBO 1.5 Fix issue with temporary files folder
 % ###################################################################
 %%
\NeedsTeXFormat{LaTeX2e}
\def\abcsvgintex@package{abcsvgintex}
\def\abcsvgintex@version{1.5}
\def\abcsvgintex@release{2025/08/01}
\ProvidesPackage{\abcsvgintex@package}[%
  \abcsvgintex@release v\abcsvgintex@version
   ABC music notation in LaTeX%
]

\RequirePackage{graphicx}
\RequirePackage{color}
\RequirePackage{verbatim}
\RequirePackage{keyvalx}
\RequirePackage{ifthen}
\def\gsetboolean#1#2{%
  \lowercase{\def\@tempa{#2}}%
  \@ifundefined{@tempswa\@tempa}{%
    \PackageError{ifthen}%
       {You can only set a boolean to `true' or `false'}\@ehc
  }{%
    \@ifundefined{#1\@tempa}{%
      \PackageError{ifthen}{Boolean #1 undefined}\@ehc
    }{%
      \global\csname#1\@tempa\endcsname
    }%
  }%
}

\newboolean{abcsvg@keepfiles}
\newboolean{abcsvg@reusefiles}

\DeclareOption{keepfiles}{\setboolean{abcsvg@keepfiles}{true}}
\DeclareOption{reusefiles}{%
  \setboolean{abcsvg@reusefiles}{true}\setboolean{abcsvg@keepfiles}{true}%
}

\ProcessOptions\relax

\newcommand{\abcsvg@auxdir}{./}
\newcommand{\abcsvgauxdir}[1]{\global\edef\abcsvg@auxdir{#1}}

% Command to copy a file #1 to #2
\newcommand{\abcsvg@copy@file}[2]{%
  cp #1 #2
}
% Command to delete a file #1
\newcommand{\abcsvg@del@file}[1]{%
  rm #1
}
% Command to convert an ABC file (#1) into a PDF file, the name of which
% is the same as #1, but with extension .pdf instead of .abc
\newcommand{\abcsvg@abc@pdf}[1]{%
  abc2svgpdfcrop #1
}

\newcommand*{\abcsvg@box@raise}{}
\newcommand*{\abcsvg@box@height}{}
\newcommand*{\abcsvg@box@depth}{}
\newcommand*{\abcsvg@box@width}{}
\newcommand*{\abcsvg@box@hpos}{}
\newcommand*{\abcsvg@songnum}{}
\newcommand*{\abcsvg@prefix}{}

\newcount\abcsvg@songnum
\newtoks\abcsvg@abctoks
\newcommand*{\abcsvg@box@defaults}{%
  \let\abcsvg@box@raise\relax
  \let\abcsvg@box@height\relax
  \let\abcsvg@box@depth\relax
  \let\abcsvg@box@width\relax
  \let\abcsvg@box@hpos\relax
  \let\abcsvg@prefix\relax
  \let\abcsvg@prelude\relax
  \let\abcsvg@abc\relax
  \abcsvg@abctoks{}\relax
  \abcsvg@songnum=1%
}
\abcsvg@box@defaults

\define@key{abcsvg}{raise}{\def\abcsvg@box@raise{#1}}
\define@key{abcsvg}{height}{\def\abcsvg@box@height{#1}}
\define@key{abcsvg}{depth}{\def\abcsvg@box@depth{#1}}
\define@key{abcsvg}{width}{\def\abcsvg@box@width{#1}}
\define@key{abcsvg}{hpos}{\def\abcsvg@box@hpos{#1}}
\define@key{abcsvg}{clear}{\abcsvg@box@defaults}
\define@key{abcsvg}{prefix}{\let\abcsvg@prefix=#1}
\define@key{abcsvg}{prelude}{\let\abcsvg@prelude=#1}
\define@key{abcsvg}{abc}{\def\abcsvg@abc{#1}}
\define@key{abcsvg}{name}{\def\abcsvg@abc{#1.abc}}
\define@key{abcsvg}{num}{\abcsvg@songnum=#1}

\newcommand{\abcsvg@defkey}[2]{%
  \if|\the\abcsvg@abctoks|
    \abcsvg@abctoks{#1:#2}%
  \else
    \expandafter\abcsvg@abctoks\expandafter{\the\abcsvg@abctoks^^J#1:#2}%
  \fi
}
\default@key{abcsvg}{\abcsvg@defkey}

\newcommand*{\abcsvgkeepnext}{\setboolean{abcsvg@keep@next}{true}}
\newcommand*{\abcsvgreusenext}{\setboolean{abcsvg@reuse@next}{true}}
\newcommand*{\abcsvgrebuildnext}{\setboolean{abcsvg@rebuild@next}{true}}

\newcommand{\abcsvgsettings}[1]{%
  \if|#1|
    \abcsvg@box@defaults
  \else
    \abcsvg@abctoks{}\relax
    \let\abcsvg@abc\relax
    \setkeys{abcsvg}{#1}%
  \fi
}

\def\abcsvg@addtoksline#1#2{%
  \if|\the#1|
    #1{#2}%
  \else
    \expandafter#1\expandafter{\the#1^^J#2}%
  \fi
}
\def\abcsvg@addtoprefix#1\end{%
  \abcsvg@addtoksline\abcsvg@setting@prefix{#1}%
}
\newcommand{\abcsvg@toks@strip@spaces}[1]{%
  \let\abcsvg@strip@finish\abcsvg@addtoprefix
  \expandafter\abcsvg@strip@spaces\expandafter\ #1\end
}
\newenvironment{abcsvgprefix}[1]{%
  \@bsphack
  \ifx#1\@undefined
    \newtoks#1%
  \fi
  \let\abcsvg@setting@prefix#1
  #1{}%
  \let\do\@makeother\dospecials
  \catcode`\^^M\active
  \def\verbatim@processline{%
    \abcsvg@toks@strip@spaces{\the\verbatim@line}%
  }%
  \verbatim@start%
}{%
  \global\expandafter\abcsvg@setting@prefix\expandafter{\the\abcsvg@setting@prefix}%
  \@esphack
}
\newenvironment{abcsvgmoreprefix}[1]{%
  \@bsphack
  \ifx#1\@undefined
    \PackageError{abcsvgintex}{No prefix named #1.}%
  \fi
  \let\abcsvg@setting@prefix#1
  \let\do\@makeother\dospecials
  \catcode`\^^M\active
  \def\verbatim@processline{%
    \abcsvg@toks@strip@spaces{\the\verbatim@line}%
  }%
  \verbatim@start%
}{%
  \global\expandafter\abcsvg@setting@prefix\expandafter{\the\abcsvg@setting@prefix}%
  \@esphack
}
%
%
\newtoks\abcsvg@pdftoks
{\catcode`\|=14\catcode`\%=12
 \gdef\abcsvg@addcmttoks#1#2{|
   \if1\the#11
     #1{%%#2}|
   \else
     \expandafter#1\expandafter{\the#1^^J%%#2}|
   \fi
 }|
}
\def\abcsvg@add@pdftoks#1{%
  \expandafter\abcsvg@pdftoks\expandafter{\the\abcsvg@pdftoks#1}%
}

\newcommand{\abcsvg@trivial@pdfkey}[2][]{%
  \if|#1|
    \define@key{abcsvgpdf}{#2}{\abcsvg@addcmttoks\abcsvg@pdftoks{#2 ##1}}%
  \else
    \define@key{abcsvgpdf}{#2}[#1]{\abcsvg@addcmttoks\abcsvg@pdftoks{#2 ##1}}%
  \fi
}
\newcommand{\abcsvg@trivial@pdflenkey}[2][]{%
  \if|#1|
    \define@key{abcsvgpdf}{#2}{%
      \abcsvg@addcmttoks\abcsvg@pdftoks{#2 }%
      \setlength{\abcsvg@x}{##1}%
      \expandafter\abcsvg@add@pdftoks\expandafter{\the\abcsvg@x}%
     }%
  \else
    \define@key{abcsvgpdf}{#2}[#1]{%
      \abcsvg@addcmttoks\abcsvg@pdftoks{#2 }%
      \setlength{\abcsvg@x}{##1}%
      \expandafter\abcsvg@add@pdftoks\expandafter{\the\abcsvg@x}%
    }%
  \fi
}

\abcsvg@trivial@pdflenkey{pagewidth}
\abcsvg@trivial@pdflenkey{pageheight}
\abcsvg@trivial@pdflenkey{topmargin}
\abcsvg@trivial@pdflenkey{leftmargin}
\abcsvg@trivial@pdflenkey{botmargin}
\abcsvg@trivial@pdflenkey{rightmargin}
%\abcsvg@trivial@pdflenkey{staffwidth}     % width of a staff
\abcsvg@trivial@pdflenkey{staffsep}       % vertical interstaff space
\abcsvg@trivial@pdfkey{scale}             % [0,1] global scale. (0.75)
\abcsvg@trivial@pdfkey{maxshrink}         % [0,1] max. horiz. compression. (0.65)
\abcsvg@trivial@pdflenkey{maxstaffsep}    % max. vert. interstaff space
\abcsvg@trivial@pdflenkey{maxsysstaffsep} % max. vert. system interstaff space
\abcsvg@trivial@pdflenkey{musicspace}     % vert. space before first staff
\abcsvg@trivial@pdflenkey{partsspace}     % vert. space before new part
\abcsvg@trivial@pdfkey[1]{printparts}     % print part indications (P:)
\abcsvg@trivial@pdfkey[1]{partsbox}       % put part names in boxes
\abcsvg@trivial@pdfkey[1]{measurebox}     % put bar numbers in boxes
\abcsvg@trivial@pdfkey[0]{measurenb}   % put bar numbers (no < 0 = each line < each x bars
\abcsvg@trivial@pdfkey[1]{contbarnb}   % number bars sequentially in repeat
\abcsvg@trivial@pdfkey{setbarnb}       % set next bar number
% \abcsvg@trivial@pdfkey[1]{printtempo}  % print tempo indications (Q:)
\abcsvg@trivial@pdfkey[1]{writefields}  % specify fields to be displayed or not
\abcsvg@trivial@pdfkey[1]{stretchstaff}% stretch underfull staves across the page
\abcsvg@trivial@pdfkey[1]{stretchlast} % stretch last staff when underfull
\abcsvg@trivial@pdfkey[1]{continueall} % ignore line breaks
\abcsvg@trivial@pdfkey[<none>]{linebreak} % define line break characters

\define@key{abcsvgpdf}{clear}[]{\abcsvg@pdftoks{}}

\newcommand{\abcsvg@set@pdfkeys}[1]{%
  \setkeys{abcsvgpdf}{#1}%
}
\newcommand{\abcsvgpdfsettings}[1]{%
  \if|#1|
    \abcsvg@pdftoks{}%
  \else
    \edef\abcsvg@tmp@cmd{#1}%
    \expandafter\abcsvg@set@pdfkeys\expandafter{\abcsvg@tmp@cmd}%
  \fi
}

%
%
\newcommand{\abcsvg@write@strip@spaces}[1]{%
  \let\abcsvg@strip@finish\abcsvg@write@abcfile
  \expandafter\abcsvg@strip@spaces\expandafter\ #1\end
}
\newcommand{\abcsvg@write@abcfile}{}
\def\abcsvg@write@abcfile#1\end{%
  \immediate\write\abcsvg@out{#1}%
}
\newcommand{\abcsvg@strip@spaces}[2]{%
  \ifx\end#2\relax
    \let\next\relax
  \else
    \if#2 \relax
      \let\next\abcsvg@strip@spaces
    \else
      \let\next\abcsvg@strip@finish
    \fi
  \fi\next#2%
}

\newboolean{abcsvg@rebuild@next}
\newcommand{\abcsvg@process@file}{%
  \ifx\abcsvg@abc\relax\else
    \immediate\write18{\abcsvg@copy@file{\abcsvg@auxdir\abcsvg@src@name.abc}{\abcsvg@abc}}%
    \global\let\abcsvg@abc\relax
  \fi
  \ifthenelse{\(\boolean{abcsvg@reusefiles}\or\boolean{abcsvg@reuse@next}\)%
              \and\not\boolean{abcsvg@rebuild@next}}{%
    \IfFileExists{\abcsvg@auxdir\abcsvg@res@name.pdf}{%
      \message{^^J*** Reusing \abcsvg@auxdir\abcsvg@res@name.pdf \on@line.^^J}%
      \let\next\relax
    }{%
      % no .pdf file
      \let\next\abcsvg@build@files
    }%
  }{% not reusing files
    \let\next\abcsvg@build@files
  }%
  \gsetboolean{abcsvg@rebuild@next}{false}%
  \gsetboolean{abcsvg@reuse@next}{false}%
  \next
}
\newcommand{\abcsvg@build@files}{%
  \message{^^J*** Processing ABC data \abcsvg@auxdir\abcsvg@src@name.abc \on@line.^^J}%
  \immediate\write18{\abcsvg@abc@pdf{\abcsvg@auxdir\abcsvg@src@name.abc}}%
  \IfFileExists{\abcsvg@auxdir\abcsvg@res@name.pdf}{}{%
    \PackageError{abcsvgintex}{%
      Could not generate file \abcsvg@auxdir\abcsvg@res@name.pdf.\MessageBreak
      Check that you use -shell-escape option.\MessageBreak
      Command to convert ABC to PDF that failed is:\MessageBreak
      \space\space\abcsvg@abc@pdf{\abcsvg@auxdir\abcsvg@src@name.abc}
    }{%
      I could not read the PDF file for a score.^^J
      This may be because your TeX engine does not allow to
      execute system commands with \write18.^^J
      It may also be because your ABC code contains errors.
    }%
  }%
  \message{^^J*** ABC processing of \abcsvg@auxdir\abcsvg@src@name.abc done 
  \on@line.*** ^^J}%
}

\newcount\abcsvg@file@cnt
\newwrite\abcsvg@out
\newtoks\abcsvg@cleanup
%\newcommand{\abcsvg@add@cleanup@cmd}[1]{%
%  \global\expandafter\abcsvg@cleanup\expandafter{\the\abcsvg@cleanup\abcsvg@cleanup@file{#1}}%
%}
%\newcommand{\abcsvg@add@cleanup@file}[1]{%
%  \global\expandafter\abcsvg@cleanup\expandafter{\the\abcsvg@cleanup{#1}}%
%}
\newcommand{\abcsvg@add@cleanup@cmd}[1]{%
  \global\expandafter\abcsvg@cleanup\expandafter{\the\abcsvg@cleanup{#1}}%
}
\newcommand{\abcsvg@add@cleanup@file}[1]{%
  \expandafter\abcsvg@add@cleanup@cmd\expandafter{\abcsvg@cleanup@file{#1}}%
}
\newcommand{\abcsvg@cleanup@file}[1]{%
  \immediate\write18{\abcsvg@del@file{#1}}%
}

%
\newboolean{abcsvg@keep@next}
\newboolean{abcsvg@reuse@next}
\newcommand{\abcsvg@read@data}{%
  \abcsvg@build@abc@name
  \ifthenelse{\boolean{abcsvg@keep@next}\or\boolean{abcsvg@reuse@next}}{%
    % don't trash this one
  }{%
    \expandafter\abcsvg@add@cleanup@file\expandafter{\expandafter\abcsvg@auxdir\abcsvg@src@name.abc}%
    % Do not remove PDF file because with xelatex, it is used in a second pass by xdvipdfmx
%    \expandafter\abcsvg@add@cleanup@file\expandafter{\expandafter\abcsvg@auxdir\abcsvg@res@name.pdf}%
  }%
  \gsetboolean{abcsvg@keep@next}{false}%
  \immediate\openout\abcsvg@out\abcsvg@auxdir\abcsvg@src@name.abc
  \ifx\abcsvg@prefix\relax\else
    \if|\the\abcsvg@prefix|\else
      \immediate\write\abcsvg@out{\the\abcsvg@prefix}%
    \fi
  \fi
  \if|\the\abcsvg@pdftoks|\else
    \immediate\write\abcsvg@out{\the\abcsvg@pdftoks}%
  \fi
  \ifnum\abcsvg@songnum>0
    \immediate\write\abcsvg@out{X:\the\abcsvg@songnum}%
  \fi
  \if|\the\abcsvg@abctoks|\else
    \immediate\write\abcsvg@out{\the\abcsvg@abctoks}%
  \fi
  \ifx\abcsvg@prelude\relax\else
    \if|\the\abcsvg@prelude|\else
      \immediate\write\abcsvg@out{\the\abcsvg@prelude}%
    \fi
  \fi
  \let\do\@makeother\dospecials
  \catcode`\^^M\active
  \def\verbatim@processline{%
    \abcsvg@write@strip@spaces{\the\verbatim@line}%
  }%
  \verbatim@start%
}

\newcommand*{\abcsvg@build@abc@name}{%
  \global\advance\abcsvg@file@cnt1
  \edef\abcsvg@src@name{abcsvgintex-tmp\the\abcsvg@file@cnt}%
  \edef\abcsvg@res@name{abcsvgintex-tmp\the\abcsvg@file@cnt}%
}
  
\newtoks\abcsvg@boxtoks
\newenvironment{abcsvg}{%
  \abcsvg@read@data
}{%
  \immediate\closeout\abcsvg@out
  \abcsvg@process@file
  \abcsvg@boxtoks{}%
  \ifx\abcsvg@box@width\relax\else
    \abcsvg@boxtoks{\makebox[\abcsvg@box@width]}%
    \ifx\abcsvg@box@hpos\relax\else
      \expandafter\abcsvg@boxtoks\expandafter{\the\abcsvg@boxtoks[\abcsvg@box@hpos]}%
    \fi
  \fi
  \the\abcsvg@boxtoks{%
  \abcsvg@boxtoks{}%
  \ifx\abcsvg@box@raise\relax\else
    \abcsvg@boxtoks{\raisebox{\abcsvg@box@raise}}%
    \ifx\abcsvg@box@height\relax\else
      \expandafter\abcsvg@boxtoks\expandafter{\the\abcsvg@boxtoks[\abcsvg@box@height]}%
      \ifx\abcsvg@box@depth\relax\else
        \expandafter\abcsvg@boxtoks\expandafter{\the\abcsvg@boxtoks[\abcsvg@box@depth]}%
      \fi
    \fi
  \fi
  \the\abcsvg@boxtoks{%
    \includegraphics{%
      \abcsvg@auxdir\abcsvg@res@name
    }%
  }%
  }%
}
\newenvironment{abcsvgbox}[1]{%
  \let\abcsvg@box=#1%
  \abcsvg@read@data
}{%
  \immediate\closeout\abcsvg@out
  \abcsvg@process@file
  \global\sbox{\abcsvg@box}{%
    \includegraphics{%
      \abcsvg@auxdir\abcsvg@res@name
    }%
  }%
}

\newboolean{abcsvg@drawgrid}
\newlength{\abcsvg@x@unit}
\newlength{\abcsvg@y@unit}
\newlength{\abcsvg@x}
\newlength{\abcsvg@y}
\newlength{\abcsvg@top@pic}
\newlength{\abcsvg@left@pic}
\newlength{\abcsvg@bot@pic}
\newlength{\abcsvg@right@pic}
\newtoks{\abcsvg@under@music}
\define@key{abcsvgpic}{top}{\setlength{\abcsvg@top@pic}{#1}}
\define@key{abcsvgpic}{left}{\setlength{\abcsvg@left@pic}{#1}}
\define@key{abcsvgpic}{bottom}{\setlength{\abcsvg@bot@pic}{#1}}
\define@key{abcsvgpic}{right}{\setlength{\abcsvg@right@pic}{#1}}
\define@key{abcsvgpic}{under}{\abcsvg@under@music={#1}}
\define@key{abcsvgpic}{grid}[]{%
  \def\abcsvg@picgrid@parms{#1}\setboolean{abcsvg@drawgrid}{true}%
}

\newenvironment{abcsvgannotate}[2][]{%
  \setboolean{abcsvg@drawgrid}{false}%
  \setlength{\abcsvg@x@unit}{\wd#2}%
  \setlength{\abcsvg@y@unit}{\ht#2}%
  \setlength{\unitlength}{1pt}%
  \def\height{\abcsvg@y@unit}%
  \def\width{\abcsvg@x@unit}%
  \def\depth{\dp#2}%
  \let\totalheight\@ovri
  \totalheight\height\advance\totalheight\depth
  \setlength{\abcsvg@top@pic}{0pt}%
  \setlength{\abcsvg@left@pic}{0pt}%
  \setlength{\abcsvg@bot@pic}{0pt}%
  \setlength{\abcsvg@right@pic}{0pt}%
  \setkeys{abcsvgpic}{#1}%
  \def\rput(##1,##2){%
    \setlength{\abcsvg@x}{##1\abcsvg@x@unit}%
    \setlength{\abcsvg@y}{##2\abcsvg@y@unit}%
    \put(\strip@pt\abcsvg@x,\strip@pt\abcsvg@y)%
  }%
  \vspace*{\abcsvg@top@pic}\leavevmode\hspace*{\abcsvg@left@pic}%
  \begin{picture}(\strip@pt\abcsvg@x@unit,\strip@pt\abcsvg@y@unit)(0,0)
    \the\abcsvg@under@music
    \put(0,0){\usebox{#2}}%
    \ifthenelse{\boolean{abcsvg@drawgrid}}{\abcsvg@gridpaper}{}%
}{%
  \end{picture}\hspace*{\abcsvg@right@pic}\vspace*{\abcsvg@bot@pic}%
  \abcsvg@under@music={}%
}

\define@key{abcgrid}{xdiv}{\def\abcsvg@x@div{#1}}
\define@key{abcgrid}{ydiv}{\def\abcsvg@y@div{#1}}
\define@key{abcgrid}{xtick}{\def\abcsvg@x@tick{#1}}
\define@key{abcgrid}{ytick}{\def\abcsvg@y@tick{#1}}

\newcount\abcsvg@tmp@cnt
\newcommand{\abcsvg@gridpaper}{%
  \def\abcsvg@x@div{50}\def\abcsvg@y@div{1}%
  \def\abcsvg@x@tick{10}\def\abcsvg@y@tick{10}%
  \def\abcsvg@set@gridkeys##1{\setkeys{abcgrid}{##1}}%
  \expandafter\abcsvg@set@gridkeys\expandafter{\abcsvg@picgrid@parms}%
  %
  \setlength{\abcsvg@x}{\width}%
  \edef\abcsvg@w{\strip@pt\abcsvg@x}%
  \setlength{\abcsvg@y}{\height}%
  \edef\abcsvg@h{\strip@pt\abcsvg@y}%
  %
  \put(0,0){\line(1,0){\abcsvg@w}}%
  \put(0,0){\line(0,1){\abcsvg@h}}%
  %
  \setlength{\abcsvg@x}{\abcsvg@x@unit}%
  \divide\abcsvg@x\abcsvg@x@div
  \edef\step@x{\strip@pt\abcsvg@x}%
  \setlength{\abcsvg@y}{\abcsvg@y@unit}%
  \divide\abcsvg@y\abcsvg@y@div
  \edef\step@y{\strip@pt\abcsvg@y}%
  %
  \abcsvg@tmp@cnt\abcsvg@x@div\advance\abcsvg@tmp@cnt1
  \edef\abcsvg@x@rep{\the\abcsvg@tmp@cnt}%
  \abcsvg@tmp@cnt\abcsvg@y@div\advance\abcsvg@tmp@cnt1
  \edef\abcsvg@y@rep{\the\abcsvg@tmp@cnt}%
  {\thinlines\color[rgb]{0.4,0.0,0.0}%
  \multiput(0,0)(\step@x,0){\abcsvg@x@rep}{\line(0,1){\abcsvg@h}}%
  \multiput(0,0)(0,\step@y){\abcsvg@y@rep}{\line(1,0){\abcsvg@w}}%
  }%
  \setlength{\abcsvg@x}{\abcsvg@x@unit}%
  \divide\abcsvg@x\abcsvg@x@tick
  \edef\step@x{\strip@pt\abcsvg@x}%
  \setlength{\abcsvg@y}{\abcsvg@y@unit}%
  \divide\abcsvg@y\abcsvg@y@tick
  \edef\step@y{\strip@pt\abcsvg@y}%
  %
  \abcsvg@tmp@cnt\abcsvg@x@tick\advance\abcsvg@tmp@cnt1
  \edef\abcsvg@x@rep{\the\abcsvg@tmp@cnt}%
  \abcsvg@tmp@cnt\abcsvg@y@tick\advance\abcsvg@tmp@cnt1
  \edef\abcsvg@y@rep{\the\abcsvg@tmp@cnt}%
  \setlength{\abcsvg@x}{\abcsvg@h\unitlength}%
  \addtolength{\abcsvg@x}{4pt}%
  \edef\abcsvg@h{\strip@pt\abcsvg@x}%
  \setlength{\abcsvg@y}{\abcsvg@w\unitlength}%
  \addtolength{\abcsvg@y}{4pt}%
  \edef\abcsvg@w{\strip@pt\abcsvg@y}%
  {\thinlines\color[rgb]{0.8,0.0,0.0}%
  \abcsvg@tmp@cnt0
  \multiput(0,-2)(\step@x,0){\abcsvg@x@rep}{%
    \begin{picture}(0,0)(0,0)
      \put(0,-3){\makebox(0,0)[t]{\the\abcsvg@tmp@cnt}\global\advance\abcsvg@tmp@cnt1}
      \put(0,0){\line(0,1){\abcsvg@h}}%
    \end{picture}
  }%
  \abcsvg@tmp@cnt0
  \multiput(-2,0)(0,\step@y){\abcsvg@y@rep}{%
    \begin{picture}(0,0)(0,0)
      \put(-3,0){\makebox(0,0)[r]{\the\abcsvg@tmp@cnt}\global\advance\abcsvg@tmp@cnt1}
      \put(0,0){\line(1,0){\abcsvg@w}}%
    \end{picture}
  }%
  }%
}

\AtEndDocument{%
  \ifthenelse{\boolean{abcsvg@keepfiles}}{%
    % keep files
  }{%
    % trash files
%    \showthe\abcsvg@cleanup
    \the\abcsvg@cleanup
  }
}

\endinput
